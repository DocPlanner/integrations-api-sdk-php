<?php
/**
 * CalendarBreaksApi
 * PHP version 5
 *
 * @category Class
 * @package  DocPlanner\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docplanner Integrations API
 *
 * Welcome to Docplanner Integrations [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API!  This API gives You the ability to build Your own application and integrate it with Docplanner services.
 *
 * OpenAPI spec version: 1.0.13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocPlanner\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use DocPlanner\Client\ApiException;
use DocPlanner\Client\Configuration;
use DocPlanner\Client\HeaderSelector;
use DocPlanner\Client\ObjectSerializer;

/**
 * CalendarBreaksApi Class Doc Comment
 *
 * @category Class
 * @package  DocPlanner\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CalendarBreaksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCalendarBreak
     *
     * @param  \DocPlanner\Client\Model\AddCalendarBreakRequest $body body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addCalendarBreak($body, $facility_id, $doctor_id, $address_id)
    {
        $this->addCalendarBreakWithHttpInfo($body, $facility_id, $doctor_id, $address_id);
    }

    /**
     * Operation addCalendarBreakWithHttpInfo
     *
     * @param  \DocPlanner\Client\Model\AddCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCalendarBreakWithHttpInfo($body, $facility_id, $doctor_id, $address_id)
    {
        $returnType = '';
        $request = $this->addCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCalendarBreakAsync
     *
     * 
     *
     * @param  \DocPlanner\Client\Model\AddCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalendarBreakAsync($body, $facility_id, $doctor_id, $address_id)
    {
        return $this->addCalendarBreakAsyncWithHttpInfo($body, $facility_id, $doctor_id, $address_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCalendarBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DocPlanner\Client\Model\AddCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCalendarBreakAsyncWithHttpInfo($body, $facility_id, $doctor_id, $address_id)
    {
        $returnType = '';
        $request = $this->addCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCalendarBreak'
     *
     * @param  \DocPlanner\Client\Model\AddCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addCalendarBreak'
            );
        }
        // verify the required parameter 'facility_id' is set
        if ($facility_id === null || (is_array($facility_id) && count($facility_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility_id when calling addCalendarBreak'
            );
        }
        // verify the required parameter 'doctor_id' is set
        if ($doctor_id === null || (is_array($doctor_id) && count($doctor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doctor_id when calling addCalendarBreak'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling addCalendarBreak'
            );
        }

        $resourcePath = '/facilities/{facility_id}/doctors/{doctor_id}/addresses/{address_id}/breaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility_id !== null) {
            $resourcePath = str_replace(
                '{' . 'facility_id' . '}',
                ObjectSerializer::toPathValue($facility_id),
                $resourcePath
            );
        }
        // path params
        if ($doctor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'doctor_id' . '}',
                ObjectSerializer::toPathValue($doctor_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.error+docplanner+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.error+docplanner+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCalendarBreak
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCalendarBreak($facility_id, $doctor_id, $address_id, $break_id)
    {
        $this->deleteCalendarBreakWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id);
    }

    /**
     * Operation deleteCalendarBreakWithHttpInfo
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCalendarBreakWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '';
        $request = $this->deleteCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCalendarBreakAsync
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarBreakAsync($facility_id, $doctor_id, $address_id, $break_id)
    {
        return $this->deleteCalendarBreakAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCalendarBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCalendarBreakAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '';
        $request = $this->deleteCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCalendarBreak'
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id)
    {
        // verify the required parameter 'facility_id' is set
        if ($facility_id === null || (is_array($facility_id) && count($facility_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility_id when calling deleteCalendarBreak'
            );
        }
        // verify the required parameter 'doctor_id' is set
        if ($doctor_id === null || (is_array($doctor_id) && count($doctor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doctor_id when calling deleteCalendarBreak'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling deleteCalendarBreak'
            );
        }
        // verify the required parameter 'break_id' is set
        if ($break_id === null || (is_array($break_id) && count($break_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $break_id when calling deleteCalendarBreak'
            );
        }

        $resourcePath = '/facilities/{facility_id}/doctors/{doctor_id}/addresses/{address_id}/breaks/{break_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility_id !== null) {
            $resourcePath = str_replace(
                '{' . 'facility_id' . '}',
                ObjectSerializer::toPathValue($facility_id),
                $resourcePath
            );
        }
        // path params
        if ($doctor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'doctor_id' . '}',
                ObjectSerializer::toPathValue($doctor_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($break_id !== null) {
            $resourcePath = str_replace(
                '{' . 'break_id' . '}',
                ObjectSerializer::toPathValue($break_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.error+docplanner+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.error+docplanner+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarBreak
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocPlanner\Client\Model\CalendarBreak
     */
    public function getCalendarBreak($facility_id, $doctor_id, $address_id, $break_id)
    {
        list($response) = $this->getCalendarBreakWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id);
        return $response;
    }

    /**
     * Operation getCalendarBreakWithHttpInfo
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocPlanner\Client\Model\CalendarBreak, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarBreakWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '\DocPlanner\Client\Model\CalendarBreak';
        $request = $this->getCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\CalendarBreak',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarBreakAsync
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarBreakAsync($facility_id, $doctor_id, $address_id, $break_id)
    {
        return $this->getCalendarBreakAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarBreakAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '\DocPlanner\Client\Model\CalendarBreak';
        $request = $this->getCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarBreak'
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarBreakRequest($facility_id, $doctor_id, $address_id, $break_id)
    {
        // verify the required parameter 'facility_id' is set
        if ($facility_id === null || (is_array($facility_id) && count($facility_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility_id when calling getCalendarBreak'
            );
        }
        // verify the required parameter 'doctor_id' is set
        if ($doctor_id === null || (is_array($doctor_id) && count($doctor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doctor_id when calling getCalendarBreak'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling getCalendarBreak'
            );
        }
        // verify the required parameter 'break_id' is set
        if ($break_id === null || (is_array($break_id) && count($break_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $break_id when calling getCalendarBreak'
            );
        }

        $resourcePath = '/facilities/{facility_id}/doctors/{doctor_id}/addresses/{address_id}/breaks/{break_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility_id !== null) {
            $resourcePath = str_replace(
                '{' . 'facility_id' . '}',
                ObjectSerializer::toPathValue($facility_id),
                $resourcePath
            );
        }
        // path params
        if ($doctor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'doctor_id' . '}',
                ObjectSerializer::toPathValue($doctor_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($break_id !== null) {
            $resourcePath = str_replace(
                '{' . 'break_id' . '}',
                ObjectSerializer::toPathValue($break_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.docplanner+json; charset=UTF-8', 'application/vnd.error+docplanner+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.docplanner+json; charset=UTF-8', 'application/vnd.error+docplanner+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCalendarBreaks
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  \DateTime $since since (required)
     * @param  \DateTime $till till (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \DocPlanner\Client\Model\CalendarBreaks
     */
    public function getCalendarBreaks($facility_id, $doctor_id, $address_id, $since, $till)
    {
        list($response) = $this->getCalendarBreaksWithHttpInfo($facility_id, $doctor_id, $address_id, $since, $till);
        return $response;
    }

    /**
     * Operation getCalendarBreaksWithHttpInfo
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  \DateTime $since (required)
     * @param  \DateTime $till (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \DocPlanner\Client\Model\CalendarBreaks, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCalendarBreaksWithHttpInfo($facility_id, $doctor_id, $address_id, $since, $till)
    {
        $returnType = '\DocPlanner\Client\Model\CalendarBreaks';
        $request = $this->getCalendarBreaksRequest($facility_id, $doctor_id, $address_id, $since, $till);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\CalendarBreaks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCalendarBreaksAsync
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  \DateTime $since (required)
     * @param  \DateTime $till (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarBreaksAsync($facility_id, $doctor_id, $address_id, $since, $till)
    {
        return $this->getCalendarBreaksAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $since, $till)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCalendarBreaksAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  \DateTime $since (required)
     * @param  \DateTime $till (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCalendarBreaksAsyncWithHttpInfo($facility_id, $doctor_id, $address_id, $since, $till)
    {
        $returnType = '\DocPlanner\Client\Model\CalendarBreaks';
        $request = $this->getCalendarBreaksRequest($facility_id, $doctor_id, $address_id, $since, $till);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCalendarBreaks'
     *
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  \DateTime $since (required)
     * @param  \DateTime $till (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCalendarBreaksRequest($facility_id, $doctor_id, $address_id, $since, $till)
    {
        // verify the required parameter 'facility_id' is set
        if ($facility_id === null || (is_array($facility_id) && count($facility_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility_id when calling getCalendarBreaks'
            );
        }
        // verify the required parameter 'doctor_id' is set
        if ($doctor_id === null || (is_array($doctor_id) && count($doctor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doctor_id when calling getCalendarBreaks'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling getCalendarBreaks'
            );
        }
        // verify the required parameter 'since' is set
        if ($since === null || (is_array($since) && count($since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $since when calling getCalendarBreaks'
            );
        }
        // verify the required parameter 'till' is set
        if ($till === null || (is_array($till) && count($till) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $till when calling getCalendarBreaks'
            );
        }

        $resourcePath = '/facilities/{facility_id}/doctors/{doctor_id}/addresses/{address_id}/breaks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since, 'date-time');
        }
        // query params
        if ($till !== null) {
            $queryParams['till'] = ObjectSerializer::toQueryValue($till, 'date-time');
        }

        // path params
        if ($facility_id !== null) {
            $resourcePath = str_replace(
                '{' . 'facility_id' . '}',
                ObjectSerializer::toPathValue($facility_id),
                $resourcePath
            );
        }
        // path params
        if ($doctor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'doctor_id' . '}',
                ObjectSerializer::toPathValue($doctor_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.docplanner+json; charset=UTF-8', 'application/vnd.error+docplanner+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.docplanner+json; charset=UTF-8', 'application/vnd.error+docplanner+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveCalendarBreak
     *
     * @param  \DocPlanner\Client\Model\MoveCalendarBreakRequest $body body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function moveCalendarBreak($body, $facility_id, $doctor_id, $address_id, $break_id)
    {
        $this->moveCalendarBreakWithHttpInfo($body, $facility_id, $doctor_id, $address_id, $break_id);
    }

    /**
     * Operation moveCalendarBreakWithHttpInfo
     *
     * @param  \DocPlanner\Client\Model\MoveCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \DocPlanner\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveCalendarBreakWithHttpInfo($body, $facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '';
        $request = $this->moveCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id, $break_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DocPlanner\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveCalendarBreakAsync
     *
     * 
     *
     * @param  \DocPlanner\Client\Model\MoveCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveCalendarBreakAsync($body, $facility_id, $doctor_id, $address_id, $break_id)
    {
        return $this->moveCalendarBreakAsyncWithHttpInfo($body, $facility_id, $doctor_id, $address_id, $break_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveCalendarBreakAsyncWithHttpInfo
     *
     * 
     *
     * @param  \DocPlanner\Client\Model\MoveCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveCalendarBreakAsyncWithHttpInfo($body, $facility_id, $doctor_id, $address_id, $break_id)
    {
        $returnType = '';
        $request = $this->moveCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id, $break_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveCalendarBreak'
     *
     * @param  \DocPlanner\Client\Model\MoveCalendarBreakRequest $body (required)
     * @param  string $facility_id ID of the Facility (required)
     * @param  string $doctor_id ID of a doctor in a facility (required)
     * @param  string $address_id ID of a doctor&#x60;s address in a facility (required)
     * @param  string $break_id ID of the Calendar Break (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveCalendarBreakRequest($body, $facility_id, $doctor_id, $address_id, $break_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling moveCalendarBreak'
            );
        }
        // verify the required parameter 'facility_id' is set
        if ($facility_id === null || (is_array($facility_id) && count($facility_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $facility_id when calling moveCalendarBreak'
            );
        }
        // verify the required parameter 'doctor_id' is set
        if ($doctor_id === null || (is_array($doctor_id) && count($doctor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $doctor_id when calling moveCalendarBreak'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling moveCalendarBreak'
            );
        }
        // verify the required parameter 'break_id' is set
        if ($break_id === null || (is_array($break_id) && count($break_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $break_id when calling moveCalendarBreak'
            );
        }

        $resourcePath = '/facilities/{facility_id}/doctors/{doctor_id}/addresses/{address_id}/breaks/{break_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($facility_id !== null) {
            $resourcePath = str_replace(
                '{' . 'facility_id' . '}',
                ObjectSerializer::toPathValue($facility_id),
                $resourcePath
            );
        }
        // path params
        if ($doctor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'doctor_id' . '}',
                ObjectSerializer::toPathValue($doctor_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'address_id' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }
        // path params
        if ($break_id !== null) {
            $resourcePath = str_replace(
                '{' . 'break_id' . '}',
                ObjectSerializer::toPathValue($break_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.error+docplanner+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.error+docplanner+json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
